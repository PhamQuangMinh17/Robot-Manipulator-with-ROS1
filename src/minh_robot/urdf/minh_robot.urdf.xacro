<!--  Author: Pham Quang Minh
  email: quangminh2479@gmail.com
  Date: 14th July 2023
-->
<?xml version = "1.0"?>
<!-- Add directory of xacro parser -->
<robot xmlns:xacro = "http://www.ros.org/wiki/xacro" name = "minh_robot">

    <!--Use xacro property as variable to store value for URDF model -->
    <!-- Variables storing for HW limit tag -->
    <xacro:property name = "PI" value = "3.14" />
    <xacro:property name = "effort" value = "30" />
    <xacro:property name = "velocity" value = "10" />

    <!-- Useful Macros: xacro property -->

    <!-- Set for mass and inertial matrix -->
    <xacro:macro name = "default_inertial" params = "mass">
        <inertial>
            <mass value = "${mass}" />
            <inertia ixx = "1.0" ixy = "0.0" ixz = "0.0"
                     iyy = "1.0" iyz = "0.0"
                     izz = "1.0" />
        </inertial>
    </xacro:macro>

    <!-- Define default_transmission for joints. -->
    <xacro:macro name = "default_transmission" params = "number">
        <transmission name = "transmission_${number}">
            <!-- Simple Transmission type in transmission_interface library -->
            <type>transmission_interface/SimpleTransmission</type>
            <!-- Name of joint to be activated -->
            <joint name = "joint_${number}">
                <!-- Type of control applied to joints with PositionJointInterface -->
                <!-- send position command to motor -> motor move until reach desired pos -->
                <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
            </joint>
            <actuator name = "motor_${number}">
                <!-- Define type of control -->
                <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
                <!-- Indicate existence of gear box connect the motor to link. ALso, indicate trans
                    mission ratio between number of rotation of motor does and resulting rotation
                    of the arm. exp: motor rotate 10deg -> arm rotate 10 deg
                    In this robot, connect motor directly to the arm -> ratio is 1
                -->
                <mechanicalReduction>1</mechanicalReduction>
            </actuator>
        </transmission>
    </xacro:macro>


    <!-- Description for Links -->
    <!-- World link. This Link is not an physical link of robot -->
    <link name = "world"/>

    <!-- Base link -->
    <link name = "base_link">
        <!-- Assign Mass and inertial matrix. They are Physical parameters of object that 
        define how it move when being objected to external forces-->

        <xacro:default_inertial mass = "1"/>

        <!-- Visualize base link -->
        <visual>
            <!-- Specify origin of the mesh with respect of the link -->
            <!-- rpy : orientation of the mesh -->
            <!-- xyz : position of the mesh -->
            <!-- Value for rpy and xyz has been identified by trial-error -->
            <origin rpy = "0 0 0" xyz = "-0.5 -0.5 0"/>

            <!-- Extract geometry from mesh -->
            <geometry>
                <!-- File is quite big. Scale resolution of file to 0.01 in all direction-->
                <mesh filename = "package://minh_robot/mesh/basement.STL" 
                scale = "0.01 0.01 0.01"/>
            </geometry>
        </visual>

        <!-- Collision tag add volume and mass of the link -->
        <collision>
            <origin rpy = "0 0 0" xyz = "-0.5 -0.5 0"/>
            <geometry>
                <mesh filename = "package://minh_robot/mesh/basement.STL" scale = "0.01 0.01 0.01"/>
            </geometry>
        </collision>
    </link>

    <!-- Base plate link -->
    <link name = "base_plate">

        <xacro:default_inertial mass = "0.1"/>

        <!-- Visualize base plate link -->
        <visual>
            <!-- Specify origin of the mesh with respect of the link -->
            <origin rpy = "0 0 0" xyz = "-0.39 -0.39 -0.56"/>

            <!-- Extract geometry from mesh -->
            <geometry>
                <!--Scale resolution of file to 0.01 in all direction-->
                <mesh filename = "package://minh_robot/mesh/base_plate.STL" 
                scale = "0.01 0.01 0.01"/>
            </geometry>
        </visual>
        
        <collision>
            <origin rpy = "0 0 0" xyz = "-0.39 -0.39 -0.56"/>
            <geometry>
                <mesh filename = "package://minh_robot/mesh/base_plate.STL" 
                scale = "0.01 0.01 0.01"/>
            </geometry>
        </collision>
    </link>

    <!-- Forward drive arm link -->
    <link name = "forward_drive_arm">
        <xacro:default_inertial mass = "0.1"/>
        <!-- Visualize Forward drive arm link -->
        <visual>
            <!-- Specify origin of the mesh with respect of the link -->
            <origin rpy = " 0 -${PI/2} ${PI/2}" xyz = "0.19 0.06 -0.08"/>

            <!-- Extract geometry from mesh -->
            <geometry>
                <mesh filename = "package://minh_robot/mesh/forward_drive_arm.STL"
                 scale = "0.01 0.01 0.01"/>
            </geometry>
        </visual>

        <collision>
            <origin rpy = " 0 -${PI/2} ${PI/2}" xyz = "0.19 0.06 -0.08"/>
            <geometry>
                <mesh filename = "package://minh_robot/mesh/forward_drive_arm.STL"
                 scale = "0.01 0.01 0.01"/>
            </geometry>
        </collision>
    </link>

    <!-- Horizontal arm link -->
    <link name = "horizontal_arm">
        <xacro:default_inertial mass = "0.1"/>
        <!--Visualize Horizontal arm link -->
        <visual>
            <!-- Specify origin of the mesh with respect of the link -->
            <origin rpy = "${PI/2} 0 ${PI/2}" xyz = "-0.03 -0.4 -0.06"/>
            <!-- Extract geometry from mesh -->
            <geometry>
                <mesh filename = "package://minh_robot/mesh/horizontal_arm.STL"
                 scale = "0.01 0.01 0.01"/>
            </geometry>
        </visual>

        <collision>
            <origin rpy = "${PI/2} 0 ${PI/2}" xyz = "-0.03 -0.4 -0.06"/>
            <geometry>
                <mesh filename = "package://minh_robot/mesh/horizontal_arm.STL"
                 scale = "0.01 0.01 0.01"/>
            </geometry>
        </collision>
    </link>

    <!-- Claw Support link -->
    <link name = "claw_support">
        <xacro:default_inertial mass = "0.05"/>
        <!--Visualize Claw Support link -->
        <visual>
            <!-- Specify origin of the mesh with respect of the link -->
            <origin rpy = "0 0 ${PI/2}" xyz = "0 -0.05 -0.15"/>
            <!-- Extract geometry from mesh -->
            <geometry>
                <mesh filename = "package://minh_robot/mesh/claw_support.STL"
                 scale = "0.01 0.01 0.01"/>
            </geometry>
        </visual>
        
        <collision>
            <origin rpy = "0 0 ${PI/2}" xyz = "0 -0.05 -0.15"/>
            <geometry>
                <mesh filename = "package://minh_robot/mesh/claw_support.STL"
                 scale = "0.01 0.01 0.01"/>
            </geometry>
        </collision>
    </link>

    <!-- Gripper right link  -->
    <link name = "gripper_right">
        <xacro:default_inertial mass = "0.01"/>
        <!--Visualize Gripper right link -->
        <visual>
            <!-- Specify origin of the mesh with respect of the link -->
            <origin rpy = "0 0 -${PI/2}" xyz = "-0.1 0.50 -0.1"/>
            <!-- Extract geometry from mesh -->
            <geometry>
                <mesh filename = "package://minh_robot/mesh/right_finger.STL"
                 scale = "0.01 0.01 0.01"/>
            </geometry>
        </visual>

        <collision>
            <origin rpy = "0 0 -${PI/2}" xyz = "-0.1 0.50 -0.1"/>
            <geometry>
                <mesh filename = "package://minh_robot/mesh/right_finger.STL"
                 scale = "0.01 0.01 0.01"/>
            </geometry>
        </collision>
    </link>

    <!-- Gripper left link  -->
    <link name = "gripper_left">
        <xacro:default_inertial mass = "0.01"/>
        <!--Visualize Gripper left link -->
        <visual>
            <!-- Specify origin of the mesh with respect of the link -->
            <origin rpy = "0 0 -${PI/2}" xyz = "-0.04 0.50 -0.1"/>
            <!-- Extract geometry from mesh with proper scale-->
            <geometry>
                <mesh filename = "package://minh_robot/mesh/left_finger.STL"
                 scale = "0.01 0.01 0.01"/>
            </geometry>
        </visual>

        <collision>
            <origin rpy = "0 0 -${PI/2}" xyz = "-0.04 0.50 -0.1"/>
            <geometry>
                <mesh filename = "package://minh_robot/mesh/left_finger.STL"
                 scale = "0.01 0.01 0.01"/>
            </geometry>
        </collision>
    </link>

    <!-- Link is used as reference point pf the terminal part of the grippper
        . Link can be considered to be point of contact between gripper and object to be grabed -->
    <!-- No mesh -->
    <link name = "tool_link"></link>

    
    <!-- Joints -->  
    <!-- Define joint that connect world and base link -->
    <!-- Attached to ground -> fixed joint -->
    <joint name = "virtual_joint" type = "fixed">
        <parent link = "world"/>
        <child link = "base_link"/>
        <!-- Point where 2 links connected together -->  
        <origin xyz = "0 0 0" rpy = "0 0 0"/>
    </joint> 

    <!-- Define joint that connect base link and base plate -->
    <!-- Base plate rotate with respect to base link-> revolute -->
    <joint name = "joint_1" type = "revolute">
        <parent link = "base_link"/>
        <child link = "base_plate"/>
        <!--Joint 1 is located 3.07 cm above ground-->
        <origin xyz = "0 0 0.307"/>
        <!-- Base plate rotate around z-axis -->
        <axis xyz = "0 0 1"/>
        <!-- Specify physical limitation of the rotation -->
        <!-- Note that this parameters based on HW of each motor -> Just modify parameter 
            of limit tag when changing new motor.
          -->
        <limit lower = "-${PI/2}" upper = "${PI/2}" effort = "${effort}" velocity = "${velocity}"/>
    </joint>

    <!-- Define joint that connect base plate and forward drive arm -->
    <joint name = "joint_2" type = "revolute">
        <parent link = "base_plate"/>
        <child link = "forward_drive_arm"/>
        <!--Joint 2 is located 3.50 cm above base plate and 2 mm distance along x axis-->
        <origin xyz = "-0.02 0 0.35"/>
        <!-- Base plate rotate around x-axis -->
        <axis xyz = "1 0 0"/>
        <limit lower = "-${PI/2}" upper = "${PI/2}" effort = "${effort}" velocity = "${velocity}"/>
    </joint>

    <!-- Define joint that connect forward_drive_arm and horizontal_arm -->
    <joint name = "joint_3" type = "revolute">
        <parent link = "forward_drive_arm"/>
        <child link = "horizontal_arm"/>
        <!--Joint 3 is located 8 cm above forward drive arm-->
        <origin xyz = "0 0 0.8"/>
        <!-- horizontal_arm rotate around x-axis -->
        <axis xyz = "1 0 0"/>
        <!-- Physical limit for joint 3 -->
        <limit lower = "-${PI/2}" upper = "${PI/2}" effort = "${effort}" velocity = "${velocity}"/>
    </joint>

    <!-- Define joint that connect horizontal_arm and claw_support
    This joint is to hold the claw support and expected to be fixed -->
    <joint name = "horizontal_arm_to_claw_support" type = "fixed">
        <parent link = "horizontal_arm"/>
        <child link = "claw_support"/>
        <!--Joint is located 82 cm long y axis-->
        <origin xyz = "0 0.82 0"/>
    </joint>

    <!-- Define joint that connect claw_support and gripper_right -->
    <joint name = "joint_4" type = "revolute">
        <parent link = "claw_support"/>
        <child link = "gripper_right"/>
        <!--Joint 4 is location: 1cm below claw support, 13cm along Y direction, -4 mm along x axis -->
        <origin xyz = "-0.04 0.13 -0.1"/>
        <!-- gripper_right rotate around z-axis -->
        <axis xyz = "0 0 1"/>
        <!-- Physical limit for joint 4: CANNOT ROTATE 180 DEGREE. ROTATE: -90DEG -> 0DEG-->
        <limit lower = "-${PI/2}" upper = "0" effort = "${effort}" velocity = "${velocity}"/>
    </joint>

    <!-- Define joint that connect claw_support and gripper_left -->
    <joint name = "joint_5" type = "revolute">
        <parent link = "claw_support"/>
        <child link = "gripper_left"/>
        <!--Joint 5 is location: 1cm below claw support, 13cm along Y direction, -22 cm along x axis -->
        <origin xyz = "-0.22 0.13 -0.1"/>
        <axis xyz = "0 0 1"/>
        <!-- Physical limit for joint 5: CANNOT ROTATE 180 DEGREE. ROTATE: 0DEG -> 90DEG-->
        <limit lower = "0" upper = "${PI/2}" effort = "${effort}" velocity = "${velocity}"/>
        <!-- 2 finger use the same motor -> add mimic to allow  replication of movement of joint 5
        into joint 4: Move with the same angle but opposite direction-->
        <mimic joint = "joint_4" multiplier = "-1" offset = "0"/> 
    </joint>

    <!-- Invisible joint connect gripper_right_to_tool to tool_link -->
    <joint name = "gripper_right_to_tool" type = "fixed">
        <parent link = "gripper_right"/>
        <child link = "tool_link"/>
        <origin xyz = "0 0 0"/>
    </joint>


    <!-- Default transmissions for each motor-->
    <!-- Transmissions for joint 1-->
    <xacro:default_transmission number = "1"/>
    <!-- Transmissions for joint 2-->
    <xacro:default_transmission number = "2"/>
    <!-- Transmissions for joint 3-->
    <xacro:default_transmission number = "3"/>
    <!-- Transmissions for joint 4. Note that gripper left + right share same motor-->
    <xacro:default_transmission number = "4"/>


    <!-- gazebo ros_control plugin -->
    <!--Contain configuration of the plugin, allow to simulate the movement of the joint
        gazebo plugin = additional pkg that add more functionalities to physic engine of gazebo-->
    <gazebo>
        <!-- plugin to implement interface between gazebo_ros_control and gazebo simulation.
        -> this plugin allow to use all the open source controller develop in pkg and gazebo  -->
        <plugin name = "gazebo_ros_control" filename = "libgazebo_ros_control.so">
            <!-- Robot Namespace: Indicate name of robot and also be the prefix of all the topic
                pub and sub by gazebo
            -->
            <robotNamespace>/minh_robot</robotNamespace>
            <!-- Simulation type: Indicate type of control that gazebo should apply to 
            actuate simulated motors-->
            <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>

            <legacyModeNS>true</legacyModeNS>
        </plugin>
        
        <!-- Plugin to make sure that joint 5 can move together with joint 4 in gazebo-->
        <!-- Use library gazebo_mimic_joint_plugin-->


	<!-- Note that that the old plugin libroboticsgroup_gazebo_mimic_joint_plugin.so has becomed deprecated -> replaced by
libroboticsgroup_upatras_gazebo_mimic_joint_plugin.so -->
        <!--<plugin name="joint_5_mimic_joint_4" filename="libroboticsgroup_gazebo_mimic_joint_plugin.so"> -->
        <plugin name="joint_5_mimic_4" filename="libroboticsgroup_upatras_gazebo_mimic_joint_plugin.so">
        <!-- joint to be copied behavior from -->
          <joint>joint_4</joint>
          <!-- joint copy behavior from -->
          <mimicJoint>joint_5</mimicJoint>
          <!-- Make joint 5 movement move opposite side -->
          <multiplier>-1.0</multiplier>
          <!-- No offset in movement of 2 joints -->
          <offset>0</offset> 
          <!-- Maximum effort --> 
          <maxEffort>${effort}</maxEffort>
          <!-- Name of robot: minh_robot -->
          <robotNamespace>/minh_robot</robotNamespace>
        </plugin>
    </gazebo>

</robot>
